local Aspect_Helpers = {
	Services = {
		["ContextActionService"] = game:GetService("ContextActionService"),
		["GuiService"] = game:GetService("GuiService"),
		["StarterGui"] = game:GetService("StarterGui"),
		["UserInputService"] = game:GetService("UserInputService"),
		["TweenService"] = game:GetService("TweenService"),
		["RunService"] = game:GetService("RunService"),
		["HttpService"] = game:GetService("HttpService"),
		["LocalizationService"] = game:GetService("LocalizationService"),
		["Players"] = game:GetService("Players"),
		["SoundService"] = game:GetService("SoundService"),
		["AnalyticsService"] = game:GetService("AnalyticsService"),
		["CollectionService"] = game:GetService("CollectionService"),
		["ContentProvider"] = game:GetService("ContentProvider"),
		["Debris"] = game:GetService("Debris"),
		["PhysicsService"] = game:GetService("PhysicsService"),
		["PathfindingService"] = game:GetService("PathfindingService"),
		["MarketplaceService"] = game:GetService("MarketplaceService"),
		["TextService"] = game:GetService("TextService"),
		["SocialService"] = game:GetService("SocialService"),
		["ScriptContext"] = game:GetService("ScriptContext"),
		["LogService"] = game:GetService("LogService"),
		["AssetService"] = game:GetService("AssetService"),
		["TestService"] = game:GetService("TestService"),
		["NetworkClient"] = game:GetService("NetworkClient"),
		["VRService"] = game:GetService("VRService"),
		["AppStorageService"] = game:GetService("AppStorageService"),
		["BadgeService"] = game:GetService("BadgeService"),
		["Chat"] = game:GetService("Chat"),
		["DataStoreService"] = game:GetService("DataStoreService"),
		["GamePassService"] = game:GetService("GamePassService"),
		["GroupService"] = game:GetService("GroupService"),
		["NotificationService"] = game:GetService("NotificationService"),
		["PointsService"] = game:GetService("PointsService"),
		["ServerScriptService"] = game:GetService("ServerScriptService"),
		["ServerStorage"] = game:GetService("ServerStorage"),
		["TeleportService"] = game:GetService("TeleportService"),
		["PlayerScripts"] = game:GetService("PlayerScripts"),
		["ReplicatedFirst"] = game:GetService("ReplicatedFirst"),
		["ReplicatedStorage"] = game:GetService("ReplicatedStorage"),
		["StarterPack"] = game:GetService("StarterPack"),
		["StarterPlayer"] = game:GetService("StarterPlayer"),
		["Teams"] = game:GetService("Teams"),
		["Visit"] = game:GetService("Visit"),
		["Workspace"] = game:GetService("Workspace")
	},
	Variables = {
		Player = game:GetService("Players").LocalPlayer,
		Character = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.Character.CharacterAdded:wait(),
		Mouse = game:GetService("Players").LocalPlayer:GetMouse(),
		
	},
	Connections = {}
}

function Aspect_Helpers:HandleConnections(GuiName)
	
end

function Aspect_Helpers:AddConnection(Signal, Callback)
	
end

function Aspect_Helpers:TweenPlay(tween)
	tween:Play()
end

function Aspect_Helpers:ThreadedTweenPlay(tween)
	task.spawn(function()
		tween:Play()
	end)
end

function Aspect_Helpers:TweenCompleted(tween, callback)
	tween.Completed:Connect(callback)
end

function Aspect_Helpers:GetPropertyChangedSignal(instance, property, callback)
	instance:GetPropertyChangedSignal(property):Connect(callback)
end

function Aspect_Helpers:LoadAsset(id)
	if id == nil then
		return "Invalid Arguments"
	end
	
	if type(id) ~= "string" then
		return "Invalid Arguments"
	end
	
	local Asset = game:GetObjects("rbxassetid://"..id)[1]
	return Asset
end

function Aspect_Helpers:GenerateRandomString()
	local chars = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"}
	local randString = ""

	for i=97, 122 do
		local char = utf8.char(i)
		table.insert(chars, char)
	end

	for i=1, 25 do
		local rand = math.random(1, #chars)
		randString = randString..chars[rand]
		if i == 25 then
			return randString
		end
	end
end

return Aspect_Helpers
